
// $Id: DB2TMTestGenerator.java,v 1.14 2008/07/17 10:50:03 geir.gronmo Exp $

package net.ontopia.topicmaps.db2tm;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import net.ontopia.utils.FileUtils;
import net.ontopia.utils.OntopiaRuntimeException;
import net.ontopia.infoset.core.LocatorIF;
import net.ontopia.topicmaps.core.TopicMapIF;
import net.ontopia.topicmaps.db2tm.*;
import net.ontopia.topicmaps.utils.ImportExportUtils;
import net.ontopia.topicmaps.xml.CanonicalXTMWriter;
import net.ontopia.topicmaps.utils.ltm.LTMTopicMapWriter;
import net.ontopia.utils.FileUtils;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class DB2TMRescanTestCase {

  private static final boolean DEBUG_LTM = false; // keep off in CVS
  protected boolean recanonicalizeSource = true;

  private final static String testdataDirectory = "db2tm";

  /**
   * @return The test cases generated by this.
   */
  @Parameters
  public static List generateTests() throws IOException {
    FileUtils.transferTestInputDirectory(testdataDirectory + "/in/rescan");
    return FileUtils.getTestInputFiles(testdataDirectory, "in/rescan", ".xml");
  }

  // --- Test case class

    private String base;
    private String filename;

    public DB2TMRescanTestCase(String root, String filename) {
      this.filename = filename;
      this.base = FileUtils.getTestdataOutputDirectory() + testdataDirectory;
    }

    @Test
    public void testFile() throws IOException {
      FileUtils.verifyDirectory(base, "out");

      String name = filename.substring(0, filename.length() - ".xml".length());
      
      // Path to the config file.
      File cfg = FileUtils.getTransferredTestInputFile(testdataDirectory, "in/rescan", filename);

      // Path to the topic map seed.
      String in = FileUtils.getTestInputFile(testdataDirectory, "in/rescan", name + ".ltm");
      
      // Path to the cxtm version of the output topic map.
      File cxtm = FileUtils.getTestOutputFile(testdataDirectory, "out", "rescan-" + name + ".cxtm");
      
      // Path to the baseline.
      String baseline = FileUtils.getTestInputFile(testdataDirectory, "baseline", "rescan-" + name + ".cxtm");
      
      // Import the topic map seed.
      TopicMapIF topicmap = ImportExportUtils.getReader(in).read();
      LocatorIF baseloc = topicmap.getStore().getBaseAddress();
      
      // Run DB2TM processes
      RelationMapping mapping = RelationMapping.read(cfg);

      // Prepare files
      File target = FileUtils.getTestOutputFile(testdataDirectory, "in", "rescan", name + ".csv");
      File before = FileUtils.getTestOutputFile(testdataDirectory, "in", "rescan", name + "-before.csv");
      File after = FileUtils.getTestOutputFile(testdataDirectory, "in", "rescan", name + "-after.csv");
      
      // Copy before-file
      FileUtils.copyFile(before, target);
                         
      // Add relations topic topicmap
      Processor.addRelations(mapping, null, topicmap, baseloc);

      // Copy after-file
      FileUtils.copyFile(after, target);
      
      // Rescan relations
      Processor.synchronizeRelations(mapping, null, topicmap, baseloc);

      // Get rid of temporary target file
      FileUtils.deleteFile(target);
      
      // Export the result topic map to ltm, for manual inspection purposes.
      if (DEBUG_LTM) {
        File ltm = FileUtils.getTestOutputFile(testdataDirectory, "out", "rescan-" + name + ".ltm");
        (new LTMTopicMapWriter(new FileOutputStream(ltm))).write(topicmap);
      }
      
      // Export the result topic map to cxtm
      FileOutputStream out = new FileOutputStream(cxtm);
      (new CanonicalXTMWriter(out)).write(topicmap);
      out.close();
      
      // Check that the cxtm output matches the baseline.
      Assert.assertTrue("The canonicalized conversion from " + filename
          + " does not match the baseline: " + cxtm + " " + baseline,
                 FileUtils.compareFileToResource(cxtm, baseline));
    }
  
}
