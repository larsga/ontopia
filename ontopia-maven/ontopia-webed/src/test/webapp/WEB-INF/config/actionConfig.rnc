# $Id: actionConfig.rnc,v 1.1 2005/08/26 11:07:07 grove Exp $

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This is the DTD defining the Action Configuration
# file syntax for Ontopia's Web Editor Framework.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

actionConfig =
  element actionConfig {
    attlist.actionConfig,
    classMap,
    buttonMap?,
    fieldMap?,
    globalForwards?,
    globalProperties?,
    actionGroup+
  }
attlist.actionConfig &= empty
# ...................................................................
# Global Mapping between class short name and fully
# qualified java class path.
classMap = element classMap { attlist.classMap, class+ }
attlist.classMap &= empty
class = element class { attlist.class, empty }
attlist.class &= attribute shortcut { xsd:ID }
attlist.class &= attribute fullname { text }
# ...................................................................
# Global Mapping between image short name and image properties
# like location and dimension used by action buttons.
buttonMap = element buttonMap { attlist.buttonMap, image+ }
attlist.buttonMap &= empty
image = element image { attlist.image, empty }
# name: under which the image can be retrieved
attlist.image &= attribute name { xsd:ID }
# src: Relative URL of the image location
attlist.image &= attribute src { text }?
attlist.image &= attribute absolutesrc { text }?
# width: image width in pixels
attlist.image &= attribute width { text }?
# height: image height in pixels
attlist.image &= attribute height { text }?
# border: image border in pixels (default: 0)
attlist.image &= attribute border { text }?
# align: image align mode (default: 'middle')
attlist.image &= attribute align { text }?
# ...................................................................
# Global Mapping between field short name and field properties
# like type and dimension used by action fields.
fieldMap = element fieldMap { attlist.fieldMap, field+ }
attlist.fieldMap &= empty
field = element field { attlist.field, empty }
# name: under which the field can be retrieved
attlist.field &= attribute name { xsd:ID }
# type: the type of this input field (text|textarea)
attlist.field &= attribute type { text }
# maxlength: maxium length of this field (only if rows==1)
attlist.field &= attribute maxlength { text }?
# columns: number of field columns
attlist.field &= attribute columns { text }?
# rows: number of field rows (default: 1)
attlist.field &= attribute rows { text }?
# ...................................................................
# Global Forward Definitions
# used for an action if not explicitly defined forward exists.
globalForwards =
  element globalForwards { attlist.globalForwards, forward+ }
attlist.globalForwards &= empty
forward = element forward { attlist.forward, reqParam* }
attlist.forward &= attribute name { xsd:ID }
# path: relative URI to forward to
attlist.forward &= attribute path { text }
# type: Action response type this forward page belongs to
attlist.forward &=
  [ a:defaultValue = "all" ]
  attribute type { "success" | "failure" | "all" }?
# frame: the response of the forward should appear
attlist.forward &= attribute frame { "edit" | "search" }?
# nextAction: must be a valid action 'name' entry
# the action name pattern is used as a template which
# is processed by the specified parameter rule.
attlist.forward &= attribute nextAction { xsd:IDREF }?
# paramRule: Shortcut of parameter rule class (optional).
attlist.forward &= attribute paramRule { xsd:IDREF }?
reqParam = element reqParam { attlist.reqParam, empty }
attlist.reqParam &= attribute name { text }
# value: if no fix value is given it will be taken from the request
attlist.reqParam &= attribute value { text }?
# ...................................................................
# Global Property Definitions for Actions and InputFields
# that are method names and the related values.
globalProperties =
  element globalProperties { attlist.globalProperties, actionType+ }
attlist.globalProperties &= empty
actionType = element actionType { attlist.actionType, actionProp+ }
# class: must be a valid  class 'shortcut' entry
attlist.actionType &= attribute class { xsd:IDREF }
actionProp = element actionProp { attlist.actionProp, empty }
# name: correlates to java bean method-name in the specified
# class/interface
attlist.actionProp &= attribute name { text }
# value: the value with which the method will be invoked
attlist.actionProp &= attribute value { text }
# ...................................................................
# Action Group for covering the modification actions on topic map
# objects (like for example changing the topic type or removing
# a subject indicator from a topic object).
# 
# Note that actions/inputFields will be executed in the order they
# are given in the file.
actionGroup =
  element actionGroup {
    attlist.actionGroup, (inputField | action)*, forward*, forwardRules
  }
attlist.actionGroup &= attribute name { xsd:ID }
inputField = element inputField { attlist.inputField, empty }
# name: under which this input element can be used by the tags,
# must be unique inside the same action group
attlist.inputField &= attribute name { text }
# class: must be a valid class 'shortcut' entry
attlist.inputField &= attribute class { xsd:IDREF }
action = element action { attlist.action, empty }
# name: under which this action can be triggered by forms,
# must be unique inside the same action group
attlist.action &= attribute name { xsd:NMTOKEN }
# class: must be a valid class 'shortcut' entry
attlist.action &= attribute class { xsd:IDREF }
# exclusive: whether the action is exclusive or not
attlist.action &= attribute exclusive { "true" | "false" }?
forwardRules =
  element forwardRules {
    attlist.forwardRules, forwardDefault, forwardLocked?, forwardRule*
  }
attlist.forwardRules &= empty
forwardDefault =
  element forwardDefault { attlist.forwardDefault, reqParam* }
# There are two ways of specifying the default forward
# either by referencing to an existing forward definition
# or directly by giving the path by an URI

# forward: must be a valid  forward 'name' entry
attlist.forwardDefault &= attribute forward { xsd:IDREF }?
# path: relative URI to forward to, because this is a convenience-
# shortcut, so no differentiation between success and failure page
# can be made
attlist.forwardDefault &= attribute path { text }?
forwardLocked = element forwardLocked { attlist.forwardLocked, empty }
# path: relative URI to forward to in case a lock is encountered
attlist.forwardLocked &= attribute path { text }
# frame: the response of the forward should appear
attlist.forwardLocked &= attribute frame { "edit" | "search" }?
forwardRule = element forwardRule { attlist.forwardRule, empty }
# action: must be a valid action 'name' entry
attlist.forwardRule &= attribute action { xsd:NMTOKEN }
# forward: must be a valid forward 'name' entry
attlist.forwardRule &= attribute forward { xsd:IDREF }
start = actionConfig
