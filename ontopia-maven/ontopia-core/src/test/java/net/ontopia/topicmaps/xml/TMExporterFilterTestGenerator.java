package net.ontopia.topicmaps.xml;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import net.ontopia.test.TestCaseGeneratorIF;
import net.ontopia.topicmaps.core.AssociationIF;
import net.ontopia.topicmaps.core.TopicNameIF;
import net.ontopia.topicmaps.core.OccurrenceIF;
import net.ontopia.topicmaps.core.TopicIF;
import net.ontopia.topicmaps.core.TopicMapIF;
import net.ontopia.topicmaps.utils.ImportExportUtils;
import net.ontopia.topicmaps.utils.ltm.LTMTopicMapWriter;
import net.ontopia.topicmaps.xml.CanonicalXTMWriter;
import net.ontopia.topicmaps.xml.TMXMLWriter;
import net.ontopia.topicmaps.xml.XTMFragmentExporter;
import net.ontopia.topicmaps.xml.XTMTopicMapReader;
import net.ontopia.topicmaps.xml.XTMTopicMapWriter;
import net.ontopia.utils.DeciderIF;
import net.ontopia.utils.FileUtils;
import net.ontopia.utils.OntopiaRuntimeException;

import org.apache.xml.serialize.OutputFormat;
import org.apache.xml.serialize.XMLSerializer;
import org.xml.sax.SAXException;

public class TMExporterFilterTestGenerator implements TestCaseGeneratorIF {

  // Set to true only when developing test cases, in which case it is easier to
  // manually inspect LTM than CXTM.
  public static final boolean ENABLE_LTM = true;
  
  /**
   * @return The test cases generated by this.
   */
  public Iterator generateTests() {
    Set tests = new HashSet();
    String root = AbstractCanonicalTestCase.getTestDirectory();
    String base = root + File.separator + "filter-tests"
        + File.separator;

    // Create test cases from each topic map file in 'in'.
    File indir = new File (base + "in" + File.separator);
    File[] infiles = indir.listFiles ();
    if (infiles != null)
      for (int i = 0; i < infiles.length; i++) {
        String name = infiles[i].getName ();
        if (name.endsWith (".ltm")
            || name.endsWith (".rdf") || name.endsWith (".xtm")) {
          tests.add(new XTMFragmentTestCase (name, base));
          tests.add(new TMXMLTestCase(name, base));
          tests.add(new XTMTestCase(name, base));
          
          // Need to work on the LTM test cases to make them always produce the
          // same output.
          // tests.add(new LTMTestCase(name, base));
        }
      }

    // Return all the test cases that were generated.
    return tests.iterator();
  }

  // --- Test case classes

  public class XTMFragmentTestCase extends AbstractCanonicalTestCase {
    private String base;
    private String filename;

    public XTMFragmentTestCase(String filename, String base) {
      super("testFile");
      this.filename = filename;
      this.base = base;
    }

    public void testFile() throws IOException {
      verifyDirectory(base, "xtm-frag");
      String xtmFragBase = base + File.separator  + "xtm-frag";
      
      verifyDirectory(xtmFragBase, "out");
      verifyDirectory(xtmFragBase, "xtm");

      // Path to the input topic map document.
      String in = base + File.separator + "in" + File.separator + filename;

      // Path to the baseline (canonicalized output of the source topic map).
      String baseline = xtmFragBase + File.separator + "baseline" +
          File.separator + filename + ".cxtm";

      // Path to the exported xtm topic map document.
      String xtm = xtmFragBase + File.separator + "xtm" + File.separator +
          filename + ".xtm";

      // Path to the output (canonicalized output of exported xtm topic map).
      String out = xtmFragBase + File.separator + "out" + File.separator +
          filename + ".cxtm";
      
      TopicMapIF sourceMap;
      sourceMap = ImportExportUtils.getReader(in).read();
      Collection topics = sourceMap.getTopics();

      OutputStream outputStream = new FileOutputStream(xtm);
      OutputFormat format = new OutputFormat();
      XTMFragmentExporter exporter = new XTMFragmentExporter();
      exporter.setExportSourceLocators(false);
      exporter.setAddIds(false);
      
      DeciderIF filter = new TestDecider();
      XMLSerializer xmlSerialize = new XMLSerializer(outputStream, format);
      exporter.setFilter(filter);
      try {
        exporter.exportAll(topics.iterator(), xmlSerialize);
      } catch (SAXException e) {
        throw new OntopiaRuntimeException(e);
      }

      // Read the exported topic map for canonicalization
      
      XTMTopicMapReader reader = (XTMTopicMapReader)ImportExportUtils.getReader(xtm);
      reader.setFollowTopicRefs(false);
      TopicMapIF exportedMap = ImportExportUtils.getReader(xtm).read();

      if (ENABLE_LTM) {
        verifyDirectory(xtmFragBase, "ltm");
        // Path to the ltm (only used when making test cases).
        String ltm = xtmFragBase + File.separator + "ltm" + File.separator + filename
            + ".ltm";
        
        // Export the topic map to ltm.
        // This line is for use when developing tests, and should be commented
        // out whenever submitted to CVS.
        (new LTMTopicMapWriter(new FileOutputStream(ltm))).write(exportedMap);
      }

      (new CanonicalXTMWriter(new FileOutputStream(out))).write(exportedMap);

      // compare results
      assertTrue("the canonicalized xtm fragment export of " + filename
          + " does not match the baseline.", FileUtils.compare(out, baseline));

    }
  }

  public class TMXMLTestCase extends AbstractCanonicalTestCase {
    private String base;
    private String filename;

    public TMXMLTestCase(String filename, String base) {
      super("testFile");
      this.filename = filename;
      this.base = base;
    }

    public void testFile() throws IOException {
      verifyDirectory(base, "tmxml");
      String tmxmlBase = base + File.separator  + "tmxml";
      
      verifyDirectory(tmxmlBase, "out");
      verifyDirectory(tmxmlBase, "tmxml");

      // Path to the input topic map document.
      String in = base + File.separator + "in" + File.separator + filename;

      // Path to the baseline (canonicalized output of the source topic map).
      String baseline = tmxmlBase + File.separator + "baseline" +
          File.separator + filename + ".cxtm";

      // Path to the exported xtm topic map document.
      String tmxml = tmxmlBase + File.separator + "tmxml" + File.separator +
          filename + ".xml";

      // Path to the output (canonicalized output of exported xtm topic map).
      String out = tmxmlBase + File.separator + "out" + File.separator +
          filename + ".cxtm";
      
      TopicMapIF sourceMap = ImportExportUtils.getReader(in).read();

      TMXMLWriter exporter = new TMXMLWriter(tmxml);
      
      DeciderIF filter = new TestDecider();
      exporter.setFilter(filter);
      exporter.write(sourceMap);
      exporter.close();
      
      // Read the exported topic map for canonicalization

      TopicMapIF exportedMap = ImportExportUtils.getReader(tmxml).read();

      if (ENABLE_LTM) {
        verifyDirectory(tmxmlBase, "ltm");
        // Path to the ltm (only used when making test cases).
        String ltm = tmxmlBase + File.separator + "ltm" + File.separator + filename
            + ".ltm";
        
        // Export the topic map to ltm.
        // This line is for use when developing tests, and should be commented
        // out whenever submitted to CVS.
        (new LTMTopicMapWriter(new FileOutputStream(ltm))).write(exportedMap);
      }

      (new CanonicalXTMWriter(new FileOutputStream(out))).write(exportedMap);

      // compare results
      assertTrue("the canonicalized tmxml export of " + filename
          + " does not match the baseline.", FileUtils.compare(out, baseline));

    }
  }

  public class XTMTestCase extends AbstractCanonicalTestCase {
    private String base;
    private String filename;

    public XTMTestCase(String filename, String base) {
      super("testFile");
      this.filename = filename;
      this.base = base;
    }

    public void testFile() throws IOException {
      verifyDirectory(base, "xtm");
      String xtmBase = base + File.separator  + "xtm";
      
      verifyDirectory(xtmBase, "out");
      verifyDirectory(xtmBase, "xtm");

      // Path to the input topic map document.
      String in = base + File.separator + "in" + File.separator + filename;

      // Path to the baseline (canonicalized output of the source topic map).
      String baseline = xtmBase + File.separator + "baseline" +
          File.separator + filename + ".cxtm";

      // Path to the exported xtm topic map document.
      String xtm = xtmBase + File.separator + "xtm" + File.separator +
          filename + ".xml";

      // Path to the output (canonicalized output of exported xtm topic map).
      String out = xtmBase + File.separator + "out" + File.separator +
          filename + ".cxtm";
      
      TopicMapIF sourceMap = ImportExportUtils.getReader(in).read();

      XTMTopicMapWriter exporter = new XTMTopicMapWriter(xtm);
      
      DeciderIF filter = new TestDecider();
      exporter.setFilter(filter);
      exporter.write(sourceMap);

      // Read the exported topic map for canonicalization

      XTMTopicMapReader reader = new XTMTopicMapReader(xtm);
      TopicMapIF exportedMap = reader.read();

      if (ENABLE_LTM) {
        verifyDirectory(xtmBase, "ltm");
        // Path to the ltm (only used when making test cases).
        String ltm = xtmBase + File.separator + "ltm" + File.separator + 
            filename + ".ltm";
        
        // Export the topic map to ltm.
        // This line is for use when developing tests, and should be commented
        // out whenever submitted to CVS.
        (new LTMTopicMapWriter(new FileOutputStream(ltm))).write(exportedMap);
      }

      (new CanonicalXTMWriter(new FileOutputStream(out))).write(exportedMap);

      // compare results
      assertTrue("the canonicalized xtm export of " + filename
          + " does not match the baseline.", FileUtils.compare(out, baseline));
    }
  }

  public class LTMTestCase extends AbstractCanonicalTestCase {
    private String base;
    private String filename;

    public LTMTestCase(String filename, String base) {
      super("testFile");
      this.filename = filename;
      this.base = base;
    }

    public void testFile() throws IOException {
      verifyDirectory(base, "ltm");
      String ltmBase = base + File.separator  + "ltm";
      
      verifyDirectory(ltmBase, "out");
      verifyDirectory(ltmBase, "ltm");

      // Path to the input topic map document.
      String in = base + File.separator + "in" + File.separator + filename;

      // Path to the ltm (only used when making test cases).
      String ltm = ltmBase + File.separator + "ltm" + File.separator + filename
          + ".ltm";
      
      // Path to the baseline (canonicalized output of the source topic map).
      String baseline = ltmBase + File.separator + "baseline" +
          File.separator + filename + ".xtm.cxtm";

      // Path to the output (canonicalized output of exported xtm topic map).
      String out = ltmBase + File.separator + "out" + File.separator +
          filename + ".cxtm";
      
      TopicMapIF sourceMap = ImportExportUtils.getReader(in).read();

      LTMTopicMapWriter exporter = (new LTMTopicMapWriter(
          new FileOutputStream(ltm)));
      
      DeciderIF filter = new TestDecider();
      exporter.setFilter(filter);
      exporter.write(sourceMap);

      // Read the exported topic map for canonicalization
      
      TopicMapIF exportedMap = ImportExportUtils.getReader(ltm).read();

      CanonicalXTMWriter xtmWriter = new CanonicalXTMWriter(
          new FileOutputStream(out)); 
      xtmWriter.write(exportedMap);

      // compare results
      assertTrue("the canonicalized ltm export of " + filename
          + " does not match the baseline.", FileUtils.compare(out, baseline));

    }
  }

  public class TestDecider implements DeciderIF {
    public boolean ok(Object object) {
      if (object instanceof TopicIF) {
        TopicIF topic = (TopicIF)object;
        Iterator baseNamesIt = topic.getTopicNames().iterator();
        while (baseNamesIt.hasNext()) {
          TopicNameIF name = (TopicNameIF)baseNamesIt.next();
          if (name.getValue().startsWith(("fTopic")))
            return false;
        }
        return true;
      } else if (object instanceof AssociationIF) {
        AssociationIF assoc = (AssociationIF)object;
        TopicIF topic = assoc.getType();
        Iterator baseNamesIt = topic.getTopicNames().iterator();
        while (baseNamesIt.hasNext()) {
          TopicNameIF name = (TopicNameIF)baseNamesIt.next();
          if (name.getValue().startsWith(("fAssocs")))
            return false;
        }
        return true;
      } else if (object instanceof OccurrenceIF) {
        OccurrenceIF occ = (OccurrenceIF)object;
        TopicIF topic = occ.getType();
        Iterator baseNamesIt = topic.getTopicNames().iterator();
        while (baseNamesIt.hasNext()) {
          TopicNameIF name = (TopicNameIF)baseNamesIt.next();
          if (name.getValue().startsWith(("fOccs")))
            return false;
        }
        return true;
      } else if (object instanceof TopicNameIF) {
        TopicNameIF name = (TopicNameIF)object;
        if (name.getValue().startsWith(("fName")))
          return false;
        return true;
      } else
        return true;
    }
    
  }
}
