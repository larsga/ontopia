<?xml version="1.0" encoding="iso-8859-1" standalone="yes"?>
<!--DOCTYPE article PUBLIC '-//OASIS//DTD DocBook XML V4.1//EN' 'dummy.dtd'-->
<article class="techreport">
  <title>The RDBMS Backend Connector</title>
  <subtitle>A Developer's Guide</subtitle>

  <articleinfo>
    <author>
      <affiliation><shortaffil>Ontopia</shortaffil></affiliation>
    </author>
    <pubdate>2010-06-09</pubdate>
    <releaseinfo>5.1</releaseinfo>

    <abstract>
      <para>This document is a guide to using the Ontopia Topic Maps
      Engine with the RDBMS Backend Connector. It assumes that the
      reader is already familiar with the Topic Maps Engine, and wishes
      to use it with a relational database backend.</para>
    </abstract>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>The RDBMS Backend Connector adds relational database
    persistence to the Ontopia Topic Maps Engine. The persistence is
    transparent and users of the topic map interfaces don't have to
    take any additional steps in order to persist topic maps.</para>

    <para>Note that only topic map objects that originate from the
    <ulink
    url="../api/net/ontopia/topicmaps/impl/rdbms/package-summary.html"><symbol>net.ontopia.topicmaps.impl.rdbms</symbol></ulink>
    package can be persisted with this backend. This means that any
    such object must be created by the TopicMapFactoryIF used by the
    store implementation in this package.</para>

    <para>Before you can develop applications with the RDBMS Backend
    Connector make sure that you've completed the installation
    procedure described in <citetitle><ulink
    url="install.html">Ontopia RDBMS Backend Connector, Installation
    Guide</ulink></citetitle>. See also the <ulink
    url="../api/net/ontopia/topicmaps/impl/rdbms/package-summary.html"><citetitle>Ontopia
    RDBMS Backend Connector, Javadoc API</citetitle></ulink> for a
    complete overview of the APIs.</para>
    
  </section>

  <section>
    <title>The RDBMS Backend Connector API</title>

    <para>All public classes provided by the RDBMS Backend Connector
    can be found in the <ulink
    url="../api/net/ontopia/topicmaps/impl/rdbms/package-summary.html"><symbol>net.ontopia.topicmaps.impl.rdbms</symbol></ulink>
    package. Only a few classes in this package are public, and most
    of those classes are implementations of interfaces in
    <symbol>net.ontopia.topicmaps.core</symbol> and
    <symbol>net.ontopia.topicmaps.core.index</symbol>. This means that
    there is actually very little new code that have to be understood
    in order to use it.</para>

    <para>Topic maps can be accessed via the RDBMS Backend Connector
    using instances of the <symbol>RDBMSTopicMapStore</symbol> class,
    but all access to the store should be done through the interface
    that it implements: <symbol>TopicMapStoreIF</symbol>.</para>
  
    <para>The RDBMS Backend Connector makes use of database
    transactions, so make sure that you commit or roll back your
    changes. Call <symbol>TopicMapStoreIF.commit()</symbol> when you
    want to persist your changes and
    <symbol>TopicMapStoreIF.abort()</symbol> if you want them to be
    rolled back.</para>

    <para>There are two important features that need to be considered
    when accessing topic maps through the RDBM Backend Connector. The
    first one is the ability to <emphasis>share cached data</emphasis>
    between store instances referencing the same topic map. The second
    feature is <emphasis>topic map store pooling</emphasis>. Both of
    these features can greatly improve performance in an
    application. The situation where both are useful is when there
    needs to be multiple instances of stores referencing the same
    topic map. In other words it is when there are multiple
    application users accessing the topic map concurrently. This is
    very common in multi-user applications, so make sure that both
    store pooling and a shared cache is used in your
    application.</para>

    <para>In order to make use of these two features you must retrieve
    your topic map store through a topic map reference (via a topic
    map source). The are currently three implementations of the
    <symbol>TopicMapSourceIF</symbol> interface in the RDBMS Backend
    Connector: <symbol>RDBMSTopicMapSource</symbol>,
<symbol>RDBMSSingleTopicMapSource</symbol> and
    <symbol>RDBMSPatternSingleTopicMapSource</symbol>.</para>

    <para>The best way to do this is to create the tm-sources.xml file
and place it on the classpath. The topic maps referenced through the
sources given in this configuration will then be available through the
<symbol>TopicMaps.createStore(String topicmapId, boolean readOnly)</symbol> method. This
approach is also less intrusive and will make your application a lot
easier to test as all topic map access is done through the same access
point.</para>

    <important><para>If you get hold of your RDBMSTopicMapStore instances
    through either ImportExportUtils or create them yourself you will
    <emphasis>not</emphasis> be able to take advantage of a shared
    cache and store pooling. Use the <symbol>TopicMapSourceIF</symbol>
    implementations, or access the topic maps stores through the
    mechanisms in the Navigator Framework instead.</para>

    <para>It is very important that you close the
    <symbol>TopicMapStoreIF</symbol> instance when you are done with
    it, i.e. call the <symbol>TopicMapStoreIF.close()</symbol>
    method. You <emphasis>must</emphasis> do this, because otherwise
    the system will run out of resources. This means that the if you
    have enabled store pooling the topic map stores will actually not
    reclaimed by the garbage collector, but rather returned to the
    topic map store pool, so that it can be reused the next time
    somebody asks for a topic map store.</para></important>

    <para>The Navigator and Web Editor Frameworks always use store
    pooling because they are implemented on top of a
    TopicMapRepository that is retrieved through the <symbol>TopicMaps</symbol> class in the <symbol>net.ontopia.topicmaps.entry</symbol> package. The
    frameworks will also make use of a shared cache by default, unless
    it has been disabled by a database property. They will retrieve a
    store for each request and return it to the pool when the request
    is over. The Web Editor Framework will also make sure that the
    transactions are committed or rolled back as appropriate.</para>

    <para>The rest of this section is a walkthrough of the various
    public classes of the RDBMS Backend Connector. The API is very
    simple, since it only contains single implementations of
    <symbol>TopicMapStoreIF</symbol> and two implementations of the
    <symbol>TopicMapSourceIF</symbol> interface.</para>

    <section>
      <title>RDBMSTopicMapStore</title>

      <para>This <interfacename>TopicMapStoreIF</interfacename>
      implementation is used to access existing topic maps and to
      create new topic maps in a relational database. Note that you
      should only create instances of this class when you only want a
      single store instance to the same topic map, and when you only
      have a single user (no concurrent access).</para>

      <para>It has four public constructors:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>RDBMSTopicMapStore()</methodname>, creates
          a new topic map object in the database. The database
          property filename is assumed specified in the
          <symbol>net.ontopia.topicmaps.impl.rdbms.PropertyFile</symbol>
          system property.</para>
        </listitem>
        <listitem>
          <para><methodname>RDBMSTopicMapStore(long
          topicmap_id)</methodname> retrieves an existing topic map
          with the specified object id. The database property filename is
          assumed specified in the
          <symbol>net.ontopia.topicmaps.impl.rdbms.PropertyFile</symbol>
          system property.</para>
        </listitem>
        <listitem>
          <para><methodname>RDBMSTopicMapStore(String
          propfile)</methodname>, creates a new topic map object in
          the database. The database configuration is read from the
          specified property file.</para>
        </listitem>
        <listitem>
          <para><methodname>RDBMSTopicMapStore(String propfile, long
          topicmap_id)</methodname> retrieves an existing topic map
          with the specified object id. The database configuration is
          read from the specified property file.</para>
        </listitem>
      </itemizedlist>

      <para>You can choose among a variety of constructors for the topic
      map store. The simplest is the default constructor. This
      constructor requires that you have set the
      <symbol>net.ontopia.topicmaps.impl.rdbms.PropertyFile</symbol>
      system property to reference the property file. See the <ulink
      url="install.html">installation guide</ulink> for a complete
      description of database properties. You can also use a constructor
      that takes the filename of the property file. The property file will 
      be attempted loaded from the file system first. If not found there 
      it will be loaded through the class loader. If the access must be 
      explicit then the property file name can be prefixed by 'file:' or 
      'classpath:'.</para>

      <para>All source instances that do not specify a topicmap id will cause
      a <emphasis>new</emphasis> topic map
      object to be created. Here is an example of how you can use the
      default constructor to create a new topic map in your relational
      database (the database property file will be found through the
      system property given above):</para>
  
      <literallayout format="linespecific" class="normal"><![CDATA[
  TopicMapStoreIF store = new RDBMSTopicMapStore();
  ]]></literallayout>
  
      <para>After you've created the <symbol>TopicMapStoreIF</symbol>
      instance you access it via the interfaces in the same way as you
      would do in the in-memory implementation. Remember to always close the
      store with <symbol>TopicMapStoreIF.close()</symbol> when you are
      done with it.</para>
  
      <para>If you want to access an <emphasis>existing</emphasis> topic
      map you must also specify the <symbol>topicmap_id</symbol>
      argument in the constructor. The following example creates a store
      that allows you to access the topic map with the id 1500:</para>
  
      <literallayout format="linespecific" class="normal"><![CDATA[
  TopicMapStoreIF store = new RDBMSTopicMapStore("propfile.xml", 1500);
  ]]></literallayout>
        
      </section>
  
      <section>
        <title>RDBMSTopicMapSource</title>
  
        <para>This <interfacename>TopicMapSourceIF</interfacename>
        implementation returns a collection of
        <interfacename>TopicMapReferenceIF</interfacename>s for all
        topic maps stored in the database. If you access your topic
        map stores through the same instance of this topic map source
        implementation you will always get the advantage of store
        pooling and a shared cache (enabled by default).</para>

        <para>Use the default constructor to create an instance of the
        topic map source. After creating an instance you must specify
        some more bean properties:</para>

        <itemizedlist>
            <listitem>
              <para><methodname>setId(String id)</methodname>, gives the
              topic map source an id. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setTitle(String title)</methodname>, gives the
              topic map source a title. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setPropertyFile(String
              filename)</methodname>, tells the topic map source which
              database property file it should use. If you don't specify
              this the source will use the system property
              instead. The property will be loaded either through the file 
              system or through the classpath. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setBaseAddress(String uri)</methodname>,
              specifies the base address of the topic map. You would
              normally want to set this property so that tolog can
              resolve it's relative locators against it. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setSupportsCreate(boolean supportsCreate)</methodname>,
              specifies whether the topic map source should allow
              creating new topic maps. Default is false. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setSupportsDelete(boolean supportsDelete)</methodname>,
              specifies whether the topic map source should allow
              deleting topic maps. Default is false. (optional)</para>
            </listitem>
        </itemizedlist>
  
       <para>The topic map id for each topic map will be the id of the
topic maps source plus '-' and the numeric identifier of the topic
map. If the source id is not given the topic map id will be 'RDBMS-'
plus the numeric identifier of the topic map.</para>

  <para>Most applications should set up the topic map source in
tm-sources.xml:</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
<?xml version="1.0"?>
<repository>
  <source class="net.ontopia.topicmaps.impl.rdbms.RDBMSTopicMapSource">
    <param name="propertyFile" value="grove.postgresql.props"/>
    <param name="id" value="postgresql"/>
    <param name="title" value="PostgreSQL database"/>
    <param name="supportsCreate" value="true"/>
    <param name="supportsDelete" value="true"/>
  </source>
</repository>
  ]]></literallayout>

  <para>The topic map can then be accessed like this::</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
// create read-only transaction
TopicMapStoreIF store = TopicMaps.createStore("postgresql-1", true);
try {
  ...
} finally {
  store.close();
}
  ]]></literallayout>

      <para>Following is an example of how you would you would use the
      <symbol>RDBMSTopicMapSource</symbol> in your
      application programmatically. This approach has several disadvantages which are described above.</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
  // create an instance
  RDBMSTopicMapSource source = new RDBMSTopicMapSource();
  // give the source an id
  source.setId("mydb");
  // give the source a title
  source.setTitle("My RDBMS Topic Maps");
  // specify the rdbms propertyfile to use
  source.setPropertyFile("db.postgresql.props");

  // get hold of the underlying topic map reference
  Collection refs = source.getReferences();
  Iterator iter = refs.iterator();

  while (iter.hasNext()) {
    TopicMapReferenceIF ref = (TopicMapReferenceIF)iter.next();
    System.out.println("Found topic map reference: " + ref.getId());

    // ...
  }

  ]]></literallayout>
  
      </section>
  
      <section>
        <title>RDBMSSingleTopicMapSource</title>
  
        <para>This <interfacename>TopicMapSourceIF</interfacename>
        implementation is very similar to
        <symbol>RDBMSTopicMapSource</symbol>, but lets you refer to a
        <emphasis>single</emphasis> topic map in the database. If you
        access your topic map stores through the same instance of this
        topic map source implementation you will always get the
        advantage of store pooling and a shared cache (enabled by
        default).</para>

        <para> Use the default constructor to create an instance of
        the topic map source. After creating an instance you must
        specify some more bean properties:</para>

        <itemizedlist>
            <listitem>
              <para><methodname>setTopicMapId(long
              topicmap_id)</methodname>, this is the id of the topic map
              we want to access.</para>
            </listitem>
            <listitem>
              <para><methodname>setId(String id)</methodname>, gives the
              topic map source an id. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setTitle(String title)</methodname>, gives the
              topic map source a title. The persistent title of the topic map will be
              used if no title given here. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setReferenceId(String
              refid)</methodname>, gives the topic map source an id to
              use for its single topic map reference. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setPropertyFile(String
              filename)</methodname>, tells the topic map source which
              database property file it should use. If you don't specify
              this the source will use the system property
              instead. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setBaseAddress(String uri)</methodname>,
              specifies the base address of the topic map. You would
              normally want to set this property so that tolog can
              resolve it's relative locators against it. (optional)</para>
            </listitem>
        </itemizedlist>

      <para>Note that this topic map source implemenation will always
      return a single <symbol>TopicMapReferenceIF</symbol> from
      <methodname>getReferences()</methodname>.</para>
  
       <para>The topic map id for each topic map will be the
referenceIdid as given, otherwise 'RDBMS-' plus the numeric identifier
of the topic map.</para>
  
  <para>Most applications should set up the topic map source in
tm-sources.xml:</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
<?xml version="1.0"?>
<repository>
  <source class="net.ontopia.topicmaps.impl.rdbms.RDBMSSingleTopicMapSource">
    <param name="propertyFile" value="db.postgresql.props"/>
    <param name="topicMapId" value="M1"/>
    <param name="referenceId" value="mytopicmap"/>
    <param name="title" value="My Topic Map"/>
  </source>
</repository>
  ]]></literallayout>

  <para>The topic map can then be accessed like this::</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
// create read-write transaction
TopicMapStoreIF store = TopicMaps.createStore("mytopicmap", false);
try {
  ...
  store.commit();
} catch (Exception e) {
  store.abort();
} finally {
  store.close();
}
  ]]></literallayout>

      <para>Following is an example
      of how you would you would use the
      <symbol>RDBMSSingleTopicMapSource</symbol> in your
      application. This approach has several disadvantages which are described above.</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
  // create an instance
  RDBMSSingleTopicMapSource source = new RDBMSSingleTopicMapSource();
  // give the source an id
  source.setId("mytm");
  // give the source a title
  source.setTitle("My RDBMS Topic Map");
  // specify the rdbms propertyfile to use
  source.setPropertyFile("db.postgresql.props");
  // specify the base address, so tolog can resolve it's locators relative to it
  source.setBaseAddress("file:/tmp/mytopicmap.ltm")
  // specify the id of the topic map
  source.setTopicMapId(5001);

  // get hold of the underlying topic map reference
  TopicMapReferenceIF ref = (TopicMapStoreIF)source.getReferences().iterator().next();

  TopicMapStoreIF store = null;
  try {
    // tell the reference to create a new store instance
    store = ref.createStore(false);

    //  ...

  } finally {
    // close the store since we're done
    if (store != null && store.isOpen()) store.close();
  }
  ]]></literallayout>
  
      </section>
  
      <section>
        <title>RDBMSPatternSingleTopicMapSource</title>
  
        <para>This <interfacename>TopicMapSourceIF</interfacename>
        implementation is very similar to
        <symbol>RDBMSSingleTopicMapSource</symbol>, but lets you refer to a
        <emphasis>single</emphasis> topic map in the database via its
        title (TM_TOPIC_MAP.title) or comment (TM_TOPIC_MAP.comments)
        instead of its physical object id. If multiple topic maps have
        the same value then the newest topic map will be used. This
        feature can be used to swap to newer topic maps at runtime by
        refreshing the topic map repository.</para>

        <para>The title or comment of a topic map can be specified via
        the --title and --comments options on the <symbol>RDBMSImport</symbol>
        command line tool.</para>

        <para>If you
        access your topic map stores through the same instance of this
        topic map source implementation you will always get the
        advantage of store pooling and a shared cache (enabled by
        default).</para>

        <para> Use the default constructor to create an instance of
        the topic map source. After creating an instance you must
        specify some more bean properties:</para>

        <itemizedlist>
            <listitem>
              <para><methodname>setId(String id)</methodname>, gives the
              topic map source an id. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setTitle(String title)</methodname>, gives the
              topic map source a title. The persistent title of the topic map will be
              used if no title given here. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setReferenceId(String
              refid)</methodname>, gives the topic map source an id to
              use for its single topic map reference. (required)</para>
            </listitem>
            <listitem>
              <para><methodname>setPropertyFile(String
              filename)</methodname>, tells the topic map source which
              database property file it should use. If you don't specify
              this the source will use the system property
              instead. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setBaseAddress(String uri)</methodname>,
              specifies the base address of the topic map. You would
              normally want to set this property so that tolog can
              resolve it's relative locators against it. (optional)</para>
            </listitem>
            <listitem>
              <para><methodname>setPattern(String pattern)</methodname>,
              specifies the title or comment value used to look
              up the topic map. (required)</para>
            </listitem>
            <listitem>
              <para><methodname>setMatch(String match)</methodname>,
              specifies where to apply the pattern. Allowed values are
              <symbol>title</symbol> or <symbol>comment</symbol>. The
              default value is <symbol>title</symbol>. (optional)</para>
            </listitem>
        </itemizedlist>

      <para>Note that this topic map source implemenation will always
      return a single <symbol>TopicMapReferenceIF</symbol> from
      <methodname>getReferences()</methodname>.</para>
  
  <para>Here is an example of how tm-sources.xml can be set up using
this topic map source:</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
<?xml version="1.0"?>
<repository>
  <source class="net.ontopia.topicmaps.impl.rdbms.RDBMSPatternSingleTopicMapSource">
    <param name="propertyFile" value="db.postgresql.props"/>
    <param name="referenceId" value="mytopicmap"/>
    <param name="match" value="title"/>
    <param name="pattern" value="My Topic Map"/>
  </source>
</repository>
  ]]></literallayout>
    
  </section>
  
      <section>
        <title>XMLConfigSource</title>
  
        <para>Both of the preceeding
        <interfacename>TopicMapSourceIF</interfacename>
        implementations require quite a bit of code to work. An
        alternative method is to use the
        <classname>XMLConfigSource</classname> class. This class has a
        convenient static utility method,
        <methodname>getRepository(String config_file)</methodname>that
        reads a <symbol>tm-sources.xml</symbol> file and creates a
        <interfacename>TopicMapRepositoryIF</interfacename>
        object. Through this object instance you that you can access
        and manage the topic map references.</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
  // read tm-sources.xml and create a topic map repository
  TopicMapRepositoryIF rep = XMLConfigSource.getRepository("/tmp/tm-sources.xml");

  // get hold of the topic map reference
  TopicMapReferenceIF ref = rep.getReferenceByKey("mytm");

  TopicMapStoreIF store = null;
  try {
    // tell the reference to create a new store instance
    store = ref.createStore(false);

    //  ...

  } finally {
    // close the store since we're done
    if (store != null && store.isOpen()) store.close();
  }

  // close the repository when we are done
  rep.close();
  ]]></literallayout>

        <para>See <ulink
        url="../navigator/config.html#sect-sources-xml">The Ontopia
        Navigator Framework Configuration Guide</ulink> for more
        information on how to set up the tm-sources.xml file.</para>

      </section>
    
  </section>
        
  <section>
    <title>Locating RDBMS topic maps</title>
                
    <para>The
    <classname>net.ontopia.topicmaps.utils.ImportExportUtils</classname>
    utility class has special support for locating topic maps using
    the RDBMS Backend Connector. This is done by passing one of the
    getter methods in the utility class the name of the property file
    and a <symbol>x-ontopia:tm-rdbms</symbol> URI referencing the
    topic map.</para>

    <para>The property file contains the backend connection properties
    and the URL the identifies the topic map. Note that both these
    values are required to successfully locate the topic map.</para>

    <warning><para>If you get hold of your RDBMSTopicMapStore instances
    through ImportExportUtils you will <emphasis>not</emphasis> be
    able to take advantage of a shared cache and store pooling. Use
    the <symbol>XMLConfigSource</symbol> or
    <symbol>TopicMapSourceIF</symbol>s instead.</para></warning>

    <section>
      <title>RDBMS URI syntax</title>

      <para>The URIs for referencing topic maps managed by the RDBMS
      Backend Connector uses the following syntax:</para>

<programlisting format="linespecific"><![CDATA[
x-ontopia:tm-rdbms:<topicmap-id>
]]></programlisting>

      <para>where <symbol>&lt;topicmap-id&gt;</symbol> is the numeric
      identity of the topic map or the topic map object's object
      id. The default base address of topic maps are always of this
      form.</para>
    </section>
         
  </section>

  <section>
    <title>Command line utilities</title>

    <section>
     <title>Importing</title>

    <literallayout format="linespecific" class="normal"><![CDATA[
java net.ontopia.topicmaps.cmdlineutils.rdbms.RDBMSImport [options] <dbprops> <tmfile1> [<tmfile2>] ...

  Imports topic map files into a topic map in a database.

  Options:
    --logargs=<propfile>  : log4j properties config file
    --loglevel=[DEBUG|INFO|WARN|ERROR|FATAL|NONE]  : the log level to use (verbosity threshold)
    --tmid=<topic map id> : existing TM to import into (creates new TM by default)
    --title=<topic map title> : persistent name of topic map
    --comments=<topic map comments> : persistent comments about topic map
    --validate=true|false : if true topic map document will be validated (default: true)
    --suppress=true|false: suppress duplicate characteristics (default: false)
    --loadExternal=true|false : if true external topic references will be resolved (default: true)
    --jdbcspy=<filename> : write jdbcspy report to the given file

  <dbprops>:   the database configuration file
  <tmfile#>:   the topic map files to import
]]></literallayout>
    </section>

    <section>
     <title>Exporting</title>

    <literallayout format="linespecific" class="normal"><![CDATA[
java net.ontopia.topicmaps.cmdlineutils.rdbms.RDBMSExport [options] <dbprops> <tmid> <expfile>

  Exports topic maps from RDBMS to file.

  Options:
    --logargs=<propfile>  : log4j properties config file
    --loglevel=[DEBUG|INFO|WARN|ERROR|FATAL|NONE]  : the log level to use (verbosity threshold)

  <dbprops>:   the database configuration file
  <tmid>:      the topic map id
  <expfile>:   the filename of the exported file
]]></literallayout>
    </section>

    <section>
     <title>Deleting</title>

    <literallayout format="linespecific" class="normal"><![CDATA[
java net.ontopia.topicmaps.cmdlineutils.rdbms.RDBMSDelete [options] <dbprops> <tmid>

  Deletes a topic map from a database.

  Options:
    --logargs=<propfile>  : log4j properties config file
    --loglevel=[DEBUG|INFO|WARN|ERROR|FATAL|NONE]  : the log level to use (verbosity threshold)

  <dbprops>:   the database configuration file
  <tmid>:      the id of the topic map to delete
]]></literallayout>
    </section>

  </section>

  <section>
    <title>Sample applications</title>

    <para>The next few sections contains some sample applications
    written with the RDBMS Backend Connector.</para>

    <section>
      <title>Importing a topic map</title>

      <para>Source code for this example can be found in: <ulink
      url="RdbmsImport.java">RdbmsImport.java</ulink></para>

      <para>This application imports an XTM topic map document into
      the database. You can run the application by issuing the
      command, where &lt;propfile&gt; is the database property file
      and &lt;xtmfile&gt; is the XTM document to be imported:</para>

      <literallayout format="linespecific" class="normal">java RdbmsImport &lt;propfile&gt; &lt;xtmfile&gt;</literallayout>
      
      <para>Result:</para>
      
      <literallayout format="linespecific" class="normal"><![CDATA[
Connecting...
Imported (id M1).
Done.
]]></literallayout>
      
    </section>

    <section>
      <title>Listing the topic maps in a database</title>

      <para>Source code for this example can be found in: <ulink
      url="RdbmsList.java">RdbmsList.java</ulink></para>
      
      <para>This application lists all the topic maps that are stored
      in the database referenced by the properties file. The list
      includes the topic map object ids and the number of topics and
      associations in each.</para>

      <para>You can run the application by issuing the command, where
      &lt;propfile&gt; is the database property file:</para>

      <literallayout format="linespecific" class="normal">java RdbmsList &lt;propfile&gt;</literallayout>
      
      <para>Result:</para>
      
      <literallayout format="linespecific" class="normal"><![CDATA[
Connecting...
Topic map ID: M602
  Topics: 750
  Associations: 1250
Topic map ID: M5102
  Topics: 2049
  Associations: 8891
Topic map ID: M9402
  Topics: 40
  Associations: 35
Done.
]]></literallayout>
    </section>

    <section>
      <title>Exporting a topic map</title>

      <para>Source code for this example can be found in: <ulink
      url="RdbmsExport.java">RdbmsExport.java</ulink></para>

      <para>This application exports a topic map stored in the
      database as an XTM document. You can run the application by
      issuing the command, where &lt;propfile&gt; is the database
      property file and &lt;topicmap-id&gt; is the database id of the
      topic map (without the 'M' prefix):</para>

      <literallayout format="linespecific" class="normal">java RdbmsExport &lt;propfile&gt; &lt;topicmap-id&gt;</literallayout>
      
      <para>Result:</para>

      <literallayout format="linespecific" class="normal"><![CDATA[
Connecting...
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<topicMap xmlns="http://www.topicmaps.org/xtm/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink">
...
</topicMap>
Done.
]]></literallayout>

      <para>Note that the output is printed to stdout, so you can
      redirect the output to a file.</para>
      
    </section>

  </section>

<section>
<title>Performance tuning</title>

<para>Ontopia comes with a SQL profiler called jdbcspy, which can be
used to check the performance of the SQL queries sent to the database
by the database backend. To enable jdbcspy, please add "jdbcspy:" at
the front of your JDBC URL in the
<filename>rdbms.properties</filename> file. That is, if the setting
was:</para>

<literallayout>
net.ontopia.topicmaps.impl.rdbms.ConnectionString=jdbc:mysql://localhost/topicmaps  
</literallayout>

<para>then change it to:</para>

<literallayout>
net.ontopia.topicmaps.impl.rdbms.ConnectionString=jdbcspy:jdbc:mysql://localhost/topicmaps  
</literallayout>

<para>This is sufficient to make jdbcspy log all SQL queries. To get a
report, go to the "Manage" page in the Ontopia web interface, and
click on the jdbcspy report button on the right-hand side. This will
show a report of all SQL queries sent, which can then be used to
analyze performance problems.</para>
</section>
</article>
